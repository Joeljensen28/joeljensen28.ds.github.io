---
title: "Client Report - Late Flights and Missing Data (JSON Files)"
subtitle: "DS 250"
author: "Joel Jensen"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: Libraries
#| include: true
import pandas as pd
import numpy as np
import plotly.express as px
import json
from scipy import stats
```


## Delayed Flights

_If you've ever been frustrated by a delayed flight before, this report is for you. By recording delayed flight data from seven airports over 10 years, we can determine which airports have the worst delays, when the best time to fly to avoid a delay is, and how often weather actually plays a role in delayed flights._

```{python}
#| label: project data
#| code-summary: Read and format project data
# Dataset is found here:
flights = pd.read_json("https://raw.githubusercontent.com/byuidatascience/data4missing/master/data-raw/flights_missing/flights_missing.json")
```

## Is the data perfect?

__Far from it.__

_Humans are imperfect at recording data and every now and again something known as a "missing value" pops up, where, for one reason or another, accurate data could not be obtained. The way this missing data is recorded often varies, so our first task is to deal with these missing values._

```{python}
#| label: Q1
#| code-summary: Read and format data

#Fixes missing data in carrier delays column
flights['num_of_delays_carrier'] = flights['num_of_delays_carrier'].replace('1500+', 1500).astype(int)
#%%
##Fixes missing airport names
def replace_missing_name(column):
    for i in range(len(column)):
        airports = [
            "Alanta, GA: Hartsfield-Jackson Atlanta International", 
            "Denver, CO: Denver International", 
            "Washington, DC: Washington Dulles International", 
            "Chicago, IL: Chicago O'Hare International", 
            "San Diego, CA: San Diego International", 
            "San Francisco, CA: San Francisco International",
            "Salt Lake City, UT: Salt Lake City International"]
        #checks if the value is a valid airport name; if not, replaces it with the corresponding airport name
        if column[i] not in airports:
            column.replace(column[i], airports[i], inplace=True)
    pass

replace_missing_name(flights.airport_name)
#%%
##Fixes names of months
#Make missing values recognizable
flights.month.replace("n/a", np.nan, inplace=True)
#Fill in missing values
flights.month.ffill(inplace=True)
#%%
##Fixes aircraft delays
flights.num_of_delays_late_aircraft.replace(-999, np.nan, inplace=True)
#%%
##Fixes missing values for delayed_nas
flights.minutes_delayed_nas.replace(-999.0, np.nan, inplace=True)
#%%
#Fixes Febuary
flights.month.replace("Febuary", "February", inplace=True)
```

_In this case, we simply omitted most of the missing values, or replaced them with another number or string depending on what information surrounded the missing value._

```{python}
#| label: Q1 chart
#| code-summary: plot example
#| fig-cap: "(See 'minutes_delayed_carrier' for missing value example)"
#| fig-align: center
##DATA TABLE WITH NAN IS HERE:
missing_value_row = flights.loc[[2]]
json_data = missing_value_row.to_json(orient="records")
json_object = json.loads(json_data)
json_formatted_string = json.dumps(json_object, indent=4)
print(json_formatted_string)
```

## Which airport has the longest delays on average?

__San Diego.__

_If your flight from San Diego has a delay, you can expect to wait over an hour on average._

```{python}
#| label: Q2
#| code-summary: Read and format data
# Summary table:
airport_metrics = flights.groupby("airport_code").agg(
    total_flights=('num_of_flights_total', 'sum'),
    delayed_flights=('num_of_delays_total', 'sum'),
    total_delay_min = ('minutes_delayed_total', 'sum')
).assign(
    pct_delayed = lambda df: (df.delayed_flights / df.total_flights) * 100,
    total_delay_hour = lambda df: df.total_delay_min / 60,
    avg_delay_time = lambda df: df.delayed_flights / df.total_delay_hour
)

airport_metrics.reset_index(inplace=True)

airport_metrics.iloc[:, [0, 1, 2, 4, 6]]

```

_On average, San Diego flights that are delayed have a 1.3 hour delay. We chose this metric as, most of the time, things go pretty smoothly at an airport, and we felt the most important thing to know was "If my flight is to be delayed, how long would I expect to wait?" Here's a helpful visualization that shows where all the airports lie:_

```{python}
#| label: Q2 chart
#| code-summary: plot example
#| fig-cap: "Average delay time in hours per delayed flight"
#| fig-align: center
px.bar(
    airport_metrics,
    x="airport_code",
    y="avg_delay_time",
    color="airport_code",
    labels={
        "avg_delay_time": "Average Delay Time in Hours",
        "airport_code": "Airport Code"
    }
).update_traces(
    showlegend=False
).add_annotation(
    x="SAN",
    y=1.269648,
    ax=-5,
    text="1.3 hrs"
)
```

## When should I fly if I want to avoid any delays?

__September.__

_The metric we chose in this situation was simply percentage of flights delayed, as we wanted to answer the question of "When should I fly if I want to avoid delays of any length whatsoever?" From this chart we can see that only 16% of all flights are delayed in the month of September._

```{python}
#| label: Q3
#| code-summary: Read and format data
month_metrics = flights.groupby("month").agg(
    total_delays=("num_of_delays_total", "sum"),
    total_flights=('num_of_flights_total', 'sum')
).assign(
    pct_flights_delayed = lambda df: (df.total_delays / df.total_flights) * 100
)
month_metrics.reset_index(inplace=True)

px.bar(
    month_metrics,
    x="month",
    y="pct_flights_delayed",
    color="month",
    color_discrete_map={
        "January": "#83d4fc",
        "February": "red",
        "March": "#02ab37",
        "April": "#fa8e8e",
        "May": "#f23333",
        "June": "#03c0ff",
        "July": "#03e3fc",
        "August": "#C8B560",
        "September": "brown",
        "October": "orange",
        "November": "#ff8c00",
        "December": "darkblue"
    },
    labels={"pct_flights_delayed": "Percent of Flights Delayed", "month": ""}
).update_traces(
    showlegend=False,
).update_xaxes(
    categoryorder='array', 
    categoryarray=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
).add_annotation(
    x="September",
    y=16.45634,
    text="16.5%",
    ax=15,
)
```

## How often does weather actually affect a plane's takeoff?

__It depends on the airport.__

_Because different airports have different climates, we organized the percentage of flights delayed by weather by airport._

```{python}
#| label: Q4
#| code-summary: Read and format data
#Replaces np.nan values with the mean of the column for late aircrafts and nas
flights["num_of_delays_nas"] = flights.num_of_delays_nas.replace(np.nan, 1376.4675324675325)

flights["num_of_delays_late_aircraft"] = flights.num_of_delays_late_aircraft.replace(np.nan, 1109.104072)

flights["nas_weather_delays"] = np.where(
    flights.month.isin(['April', 'May', 'June', 'July', 'August']),
    (flights.num_of_delays_nas * 0.4), 
    (flights.num_of_delays_nas * 0.65)
)

flights["total_weather_delays"] = (
    flights.num_of_delays_weather + 
    (flights.num_of_delays_late_aircraft * .3) + 
    flights.nas_weather_delays
)
##DATA TABLE IS HERE:
flights.iloc[:, [0, 18, 4, 17, 9]].head(5)
```

_In order to obtain a fuller perspective of the weather data, we replaced the missing values with the mean, and took portions of other columns that were known to be weather delays, and added them to a new column with the actual total of weather delays. Here is a visualization that should help to digest the data:_

```{python}
#| label: Q4 chart
#| code-summary: plot example
#| fig-cap: "Percent of flights delayed due to weather"
#| fig-align: center
weather_metrics = flights.groupby("airport_code").agg(
    total_flights=('num_of_flights_total', 'sum'),
    delays_weather=('total_weather_delays', 'sum')
).assign(
    pct_weather_delays = lambda df: (df.delays_weather / df.total_flights) * 100
)

weather_metrics.reset_index(inplace=True)
#%%
px.bar(
    weather_metrics,
    x="airport_code",
    y="pct_weather_delays",
    color="airport_code",
    labels={
        "pct_weather_delays": "Percent Delays Due to Weather",
        "airport_code": "Airport Code"
    }
).update_layout(
    showlegend=False,
).add_annotation(
    x="SFO",
    y=9.72951,
    text="San Fransisco: 9.7%"
)
```
_We find here that, unsurprisingly due to its rainy winter months, San Fansisco has the largest percent of delays due to weather._

## Conclusion

_In conclusion, this data tells us a lot about the cause of delays, where they happen, when they happen, and what causes them. If you want to get somewhere, fly from Chicago around September._