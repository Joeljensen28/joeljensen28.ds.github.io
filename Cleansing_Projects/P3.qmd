---
title: "Client Report - Finding Relationships in Baseball"
subtitle: "DS 250"
author: "Joel Jensen"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import sqlite3
import plotly.express as px
```


## A glimpse into the history of baseball
_For the most part, data collection is a new practice. Very rarely will you see datasets with data that predates the 1900s, and if you do, they're usually not very tidy. However, this data reaches back into the 1800s with countless statistics about America's beloved sport; baseball._

```{python}
#| label: project data
#| code-summary: Read and format project data
con = sqlite3.connect('lahmansbaseballdb.sqlite')
```

## What can we learn about the backstory of baseball players?

__More than you think.__

_Here we have a dataframe that includes three players who attended school right here at BYU-Idaho, along with their salaries for each year._

```{python}
#| label: Q1 table
#| code-summary: Read and format data
byui_players = pd.read_sql_query("""
                                 SELECT DISTINCT collegeplaying.playerID, 
                                       collegeplaying.schoolID, 
                                       salaries.salary, 
                                       salaries.yearID, 
                                       salaries.teamID
                                FROM salaries
                                FULL OUTER JOIN collegeplaying ON salaries.playerID = collegeplaying.playerID
                                WHERE schoolID = 'idbyuid'
                                ORDER BY salary DESC
                                 """, con)

byui_players
```

_That salary puts Harvard graduates to shame._

## Who are the best baseball players in history?

__Depends on how you look at it.__

_Let's choose batting average (number of hits divided by number of at-bats) for our metric. If we simply look at the highest batting average for everyone who batted at least once in a year, we get this:_

```{python}
#| label: Q2 table 1
#| code-summary: Read and format data

con.execute(
    """
    UPDATE batting
    SET batting_average = CAST(H AS REAL) / AB
    WHERE AB > 0
    """
)

batting_average = pd.read_sql_query(
    """
    SELECT batting.playerID, batting.yearID, batting.batting_average
    FROM batting
    WHERE AB >= 1
    ORDER BY batting_average DESC, playerID ASC
    LIMIT 5
    """, con
)

batting_average
```

_Now that doesn't tell us very much. For all we know, these dudes only batted once a year and just happened to hit it._

_So instead, let's make sure everyone we include has batted at least 10 times._

```{python}
#| label: Q2 table 2
#| code-summary: Read and format data
batting_average_AB_10 = pd.read_sql_query(
    """
    SELECT batting.playerID, batting.yearID, batting.batting_average
    FROM batting
    WHERE AB >= 10
    ORDER BY batting_average DESC, playerID ASC
    LIMIT 5
    """, con
)

batting_average_AB_10
```

_There we go, that's a bit more meaningful._

_How about we take it a step further and make sure they have over 100 at-bats so we know only the best are being considered? Additionally, lets take their entire career average to see who is truly the greatest baseball player of all time:_

```{python}
#| label: Q2 table 3
#| code-summary: Read and format data
batting_metrics = pd.read_sql_query(
    """
    SELECT batting.playerID,
           SUM(H) AS total_hits,
           SUM(AB) AS total_bats,
           SUM(H) * 1.0 / SUM(AB) AS batting_avg
    FROM batting
    GROUP BY batting.playerID
    HAVING SUM(AB) >= 100
    ORDER BY batting_avg DESC
    LIMIT 5
    """, con
)

batting_metrics
```

_Unsurprisingly, Tyrus "The Georgia Peach" Cobb has the best overall carrer batting average in history, making him arguably the best baseball player to ever live._

## Who are the best (or worst) teams of all time?

__Again, it depends on how you define "best".__

_Here, we're looking at the win rate (number of wins divided by total games played) of the top two and bottom two teams (excluding those with zero wins):_

```{python}
#| label: Q3 table
#| code-summary: Read and format data
team_metrics = pd.read_sql_query(
    """
    SELECT teams.teamID,
           SUM(W) + SUM(L) AS total_games,
           SUM(W) AS total_wins,
           ROUND(CAST(SUM(W) AS REAL) / (SUM(W) + SUM(L)) * 100, 2) AS win_rate
    FROM teams
    WHERE teams.teamID IN ("SLU", "BS1", "ELI", "KEO")
    GROUP BY teams.teamID
    ORDER BY win_rate DESC
    """, con
)

team_metrics
```

_And here's a nifty visualization to help digest the data:_

```{python}
#| label: Q3 chart
#| code-summary: Read and format data
px.bar(
    team_metrics,
    x="teamID",
    y="win_rate",
    color="teamID",
    color_discrete_map={
        "SLU": "green",
        "BS1": "green",
        "ELI": "red",
        "KEO": "red"
    },
    labels={
        "teamID": "Team",
        "win_rate": "Win %"
    },
    title="Top and Bottom Two Teams According to Win Percentage",
    text_auto=True
).update_layout(showlegend=False).add_vline(
    x=1.5,
).add_annotation(
    x=1.45,
    y=80,
    text="Top Two",
    textangle=-90,
    showarrow=False
).add_annotation(
    x=1.55,
    y=80,
    text="Bottom Two",
    textangle=90,
    showarrow=False
)
```

_From this, we can argue that SLU is the best baseball team in history with an 83% win rate. Imagine going up against these guys knowing you only have a 17% chance of victory!_

## Conclusion

_In conclusion, we have a shockingly large amount of baseball data that spans a shockingly large amount of time that makes for some very interesting stories. We can learn about the legacy of the greatest players to ever live, or the stories of those from humble beginnings such as Rexburg, Idaho who rose to fortune._